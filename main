#region Using declarations
using System;
using NinjaTrader.Cbi;
using NinjaTrader.NinjaScript.Strategies;
#endregion

namespace NinjaTrader.NinjaScript.Strategies
{
    public class DynamicReferencePriceStrategy : Strategy
    {
        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = @"Trades based on the percentage change from the latest closing price.";
                Name = "DynamicReferencePriceStrategy";
                Calculate = Calculate.OnBarClose; // This ensures the strategy evaluates at the close of each bar
                EntriesPerDirection = 1;
                IsExitOnSessionCloseStrategy = true;
                ExitOnSessionCloseSeconds = 30;
                IsFillLimitOnTouch = false;
                MaximumBarsLookBack = MaximumBarsLookBack.TwoHundredFiftySix;
                OrderFillResolution = OrderFillResolution.Standard;
                Slippage = 2;
                StartBehavior = StartBehavior.WaitUntilFlat;
                TimeInForce = TimeInForce.Gtc;
                TraceOrders = false;
                RealtimeErrorHandling = RealtimeErrorHandling.StopCancelClose;
                StopTargetHandling = StopTargetHandling.PerEntryExecution;
                BarsRequiredToTrade = 20;
            }
        }

        protected override void OnBarUpdate()
{
    // Ensure we have at least two bars to compare
    if (CurrentBars[0] < 1) return;

    // Convert the bar's end time to Eastern Time
    // Note: NinjaTrader server time is typically in Eastern Time; adjust if your server uses a different timezone
    DateTime estTime = TimeZoneInfo.ConvertTime(Time[0], TimeZoneInfo.Local, TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time"));

    // Define the no-trade period start and end times
    TimeSpan noTradeStart = new TimeSpan(15, 0, 0); // 3:00 PM EST
    TimeSpan noTradeEnd = new TimeSpan(17, 0, 0); // 5:00 PM EST


    // Check if current bar's time is within the no-trade period
    if (estTime.TimeOfDay >= noTradeStart && estTime.TimeOfDay <= noTradeEnd)
    {
        return; // Skip this bar because it falls within the no-trade period
    }

    // Calculate percentage change from open to close of the previous candle
    double percentageChange = ((Close[1] - Open[1]) / Open[1]) * 100;

    // Determine candle size for setting profit target and stop loss
    double candleSize = Math.Abs(Close[1] - Open[1]);
    double profitTargetTicks = candleSize / TickSize * 0.5; // 50% of candle size
    double stopLossTicks = candleSize / TickSize * 2; // 200% of candle size

    // Conditions to enter trade
    if (percentageChange <= -0.35 && percentageChange >= -0.5)
    {
        EnterLong(1, "LongEntry");
        SetProfitTarget("LongEntry", CalculationMode.Ticks, profitTargetTicks);
        SetStopLoss("LongEntry", CalculationMode.Ticks, stopLossTicks, false);
    }
    else if (percentageChange >= 0.35 && percentageChange <= 0.5)
    {
        EnterShort(1, "ShortEntry");
        SetProfitTarget("ShortEntry", CalculationMode.Ticks, profitTargetTicks);
        SetStopLoss("ShortEntry", CalculationMode.Ticks, stopLossTicks, false);
    }
}
	}
}
